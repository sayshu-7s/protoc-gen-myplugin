package main

import (
	"flag"
	"html/template"
	"log"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/encoding/protojson"
)

const ModuleName = "github.com/sayshu-7s/protoc-gen-myplugin"

func main() {
	// CodeGeneratorRequestからパラメータを読み出すための変数.
	flags := flag.NewFlagSet("", flag.ContinueOnError)
	param1 := flags.String("param1", "default", "")
	param2 := flags.String("param2", "default", "")

	opt := protogen.Options{
		// ParamFuncは, opt.Runした際にCodeGeneratorRequestのparameterごとに呼び出される.
		// これにより, 前段で宣言していた変数に値がセットされる.
		ParamFunc: flags.Set,
	}

	// CodeGeneratorRequestをCodeGeneratorRequest.jsonにして吐き出す.
	opt.Run(func(plugin *protogen.Plugin) error {
		// セットされたパラメータをログ出力で確認.
		log.Print(*param1)
		log.Print(*param2)

		// CodeGeneratorRequest.jsonの生成.
		// CodeGeneratorRequestをJSONとして表現し, ファイルに出力する.
		cgrFile := plugin.NewGeneratedFile(ModuleName+"/gen/json/CodeGeneratorRequest.json", "")
		jb, err := protojson.Marshal(plugin.Request)
		if err != nil {
			return err
		}
		if _, err := cgrFile.Write(jb); err != nil {
			return err
		}

		for _, f := range plugin.Files {
			// protoファイルごとの処理
			// 引数で指定したファイルが生成対象とされ, f.Generate == trueとなっている.
			if f.Generate {
				outFile := plugin.NewGeneratedFile(f.GeneratedFilenamePrefix+".myplugin.go", f.GoImportPath)

				if _, err := outFile.Write([]byte(`// Code generated by protoc-gen-myplugin. DO NOT EDIT.
				package ` + f.GoPackageName + "\n")); err != nil {
					return err
				}

				if len(f.Messages) > 0 {
					if err := writePrintFuncs(f.Messages, outFile); err != nil {
						return err
					}
				}
			}
		}

		return nil
	})
}

func writePrintFuncs(msgs []*protogen.Message, outFile *protogen.GeneratedFile) error {
	// QualifiedGoIdentを呼び出すと, 指定したpackageは自動的にimportされる.
	printFuncName := outFile.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "fmt", GoName: "Println"})
	tmp := `
	func Print{{.MsgName}}() {
		{{.PrintFuncName}}("{{.MsgName}}")
	}
				`
	tmpl, err := template.New("template").Parse(tmp)
	if err != nil {
		return err
	}
	for _, m := range msgs {
		err := tmpl.Execute(
			outFile,
			struct {
				MsgName       string
				PrintFuncName string
			}{
				MsgName:       m.GoIdent.GoName,
				PrintFuncName: printFuncName,
			},
		)
		if err != nil {
			return err
		}
	}
	return nil
}
